// CreateLichChieu.tsx
import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Swal from "sweetalert2";
import dayjs from "dayjs";
import { createLichChieu } from "../../../provider/LichChieuProviders";
import { getListPhim } from "../../../provider/PhimProvider";
import { getListPhongChieu } from "../../../provider/PhongChieuProvider";
import { getListPhienBan } from "../../../provider/PhienBanProvider";

export default function CreateLichChieu() {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    phim_id: "",
    phong_id: "",
    phien_ban_id: [],
    gio_chieu: "",
    gio_ket_thuc: "",
  });

  type Phim = { id: number; ten_phim: string; phien_ban_id: string; thoi_luong: number };
  type Phong = { id: number; ten_phong: string };
  type PhienBan = { id: number; ten_phien_ban: string };

  const [phimList, setPhimList] = useState<Phim[]>([]);
  const [phongList, setPhongList] = useState<Phong[]>([]);
  const [phienBanList, setPhienBanList] = useState<PhienBan[]>([]);
  const [tatCaPhienBan, setTatCaPhienBan] = useState<PhienBan[]>([]);
  const [selectedPhim, setSelectedPhim] = useState<Phim | null>(null);
  const [loading, setLoading] = useState(false);

  // üîπ Load phim, ph√≤ng, phi√™n b·∫£n
  useEffect(() => {
    const fetchData = async () => {
      try {
        const phimRes = await getListPhim({});
        const phimData = Array.isArray(phimRes.data) ? phimRes.data : phimRes;
        setPhimList(phimData);

        const phongRes = await getListPhongChieu();
        const phongData = Array.isArray(phongRes.data) ? phongRes.data : phongRes;
        setPhongList(phongData);

        const phienBanRes = await getListPhienBan({});
        const phienBanData = Array.isArray(phienBanRes.data) ? phienBanRes.data : phienBanRes;
        setTatCaPhienBan(phienBanData);
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu:", error);
        Swal.fire("L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch phim, ph√≤ng ho·∫∑c phi√™n b·∫£n", "error");
      }
    };
    fetchData();
  }, []);

  const handlePhimChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
  const phimId = e.target.value;
  const phim = phimList.find((p) => String(p.id) === phimId) || null;

  setSelectedPhim(phim);
  setFormData((prev) => ({ ...prev, phim_id: phimId, phien_ban_id: null }));

  if (phim && phim.phien_ban_id) {
    try {
      console.log("üîπ Raw phien_ban_id trong phim:", phim.phien_ban_id);

      let cleaned = phim.phien_ban_id;
      if (typeof cleaned === "string") {
        cleaned = cleaned.replace(/\\\\/g, "\\").replace(/\\"/g, '"');
      }

      const ids = JSON.parse(cleaned).map(String);
      console.log("‚úÖ M·∫£ng ID sau khi x·ª≠ l√Ω:", ids);

      const filtered = tatCaPhienBan.filter((pb) => ids.includes(String(pb.id)));
      console.log("üéû Phi√™n b·∫£n t√¨m ƒë∆∞·ª£c:", filtered);

      setPhienBanList(filtered);
    } catch (err) {
      console.warn("‚ö†Ô∏è Kh√¥ng th·ªÉ parse phien_ban_id:", err);
      setPhienBanList([]);
    }
  } else {
    setPhienBanList([]);
  }
};


  // üîπ Khi ch·ªçn gi·ªù chi·∫øu ‚Üí t·ª± t√≠nh gi·ªù k·∫øt th√∫c = gi·ªù chi·∫øu + th·ªùi l∆∞·ª£ng phim + 15 ph√∫t
  const handleGioChieuChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    let gioKetThuc = "";

    if (selectedPhim?.thoi_luong) {
      gioKetThuc = dayjs(value)
        .add(selectedPhim.thoi_luong + 15, "minute")
        .format("YYYY-MM-DDTHH:mm");
    }

    setFormData((prev) => ({
      ...prev,
      gio_chieu: value,
      gio_ket_thuc: gioKetThuc,
    }));
  };

  // üîπ Thay ƒë·ªïi c√°c tr∆∞·ªùng kh√°c
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // üîπ G·ª≠i form
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);

    if (!formData.phim_id || !formData.phong_id || !formData.gio_chieu || !formData.gio_ket_thuc) {
      setLoading(false);
      Swal.fire("‚ö†Ô∏è Thi·∫øu th√¥ng tin", "Vui l√≤ng nh·∫≠p ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!", "warning");
      return;
    }

    try {
      const payload = {
        phim_id: Number(formData.phim_id),
        phong_id: Number(formData.phong_id),
        phien_ban_id: formData.phien_ban_id ? Number(formData.phien_ban_id) : null,
        gio_chieu: formData.gio_chieu,
        gio_ket_thuc: formData.gio_ket_thuc,
      };

      const res = await createLichChieu(payload);
      Swal.fire("üéâ Th√†nh c√¥ng", res.message || "T·∫°o l·ªãch chi·∫øu th√†nh c√¥ng!", "success");
      navigate("/admin/lich-chieu");
    } catch (err: any) {
      console.error("‚ùå L·ªói t·∫°o l·ªãch chi·∫øu:", err);
      Swal.fire("L·ªói", err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o l·ªãch chi·∫øu", "error");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mt-4">
      <div className="card shadow-sm border-0">
        <div className="card-header bg-primary text-white fw-semibold fs-5">
          ‚ûï Th√™m L·ªãch Chi·∫øu M·ªõi
        </div>

        <div className="card-body">
          <form onSubmit={handleSubmit}>
            {/* Phim */}
            <div className="mb-3">
              <label className="form-label fw-bold">üé¨ Phim</label>
              <select
                name="phim_id"
                className="form-select"
                value={formData.phim_id}
                onChange={handlePhimChange}
                required
              >
                <option value="">-- Ch·ªçn phim --</option>
                {phimList.map((p) => (
                  <option key={p.id} value={p.id}>
                    {p.ten_phim}
                  </option>
                ))}
              </select>
            </div>

            {/* Phi√™n b·∫£n */}
            <div className="mb-3">
              <label className="form-label fw-bold">üéû Phi√™n b·∫£n</label>
              <select
                name="phien_ban_id"
                className="form-select"
                value={formData.phien_ban_id}
                onChange={handleChange}
                required
              >
                <option value="">-- Ch·ªçn phi√™n b·∫£n --</option>
                {phienBanList.map((pb) => (
                  <option key={pb.id} value={pb.id}>
                    {pb.ten_phien_ban}
                  </option>
                ))}
              </select>
            </div>

            {/* Ph√≤ng chi·∫øu */}
            <div className="mb-3">
              <label className="form-label fw-bold">üè¢ Ph√≤ng chi·∫øu</label>
              <select
                name="phong_id"
                className="form-select"
                value={formData.phong_id}
                onChange={handleChange}
                required
              >
                <option value="">-- Ch·ªçn ph√≤ng chi·∫øu --</option>
                {phongList.map((phong) => (
                  <option key={phong.id} value={phong.id}>
                    {phong.ten_phong}
                  </option>
                ))}
              </select>
            </div>

            {/* Gi·ªù chi·∫øu */}
            <div className="mb-3">
              <label className="form-label fw-bold">üïê Gi·ªù chi·∫øu</label>
              <input
                type="datetime-local"
                name="gio_chieu"
                className="form-control"
                value={formData.gio_chieu}
                onChange={handleGioChieuChange}
                required
              />
            </div>

            {/* Gi·ªù k·∫øt th√∫c */}
            <div className="mb-3">
              <label className="form-label fw-bold">‚è∞ Gi·ªù k·∫øt th√∫c (t·ª± ƒë·ªông)</label>
              <input
                type="datetime-local"
                name="gio_ket_thuc"
                className="form-control"
                value={formData.gio_ket_thuc}
                disabled
                readOnly
              />
              {selectedPhim?.thoi_luong && (
                <p className="text-muted mt-1">
                  * Th·ªùi l∆∞·ª£ng phim: {selectedPhim.thoi_luong} ph√∫t + 15 ph√∫t d·ªçn ph√≤ng
                </p>
              )}
            </div>

            {/* N√∫t h√†nh ƒë·ªông */}
            <div className="text-end mt-4">
              <button
                type="button"
                className="btn btn-secondary me-2"
                onClick={() => navigate(-1)}
                disabled={loading}
              >
                Quay l·∫°i
              </button>

              <button type="submit" className="btn btn-primary" disabled={loading}>
                {loading ? "‚è≥ ƒêang l∆∞u..." : "L∆∞u l·ªãch chi·∫øu"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
