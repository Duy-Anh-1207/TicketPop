import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Swal from "sweetalert2";
import { createUser } from "../../../provider/UserProviders";
import { getListVaiTro } from "../../../provider/VaiTroProvider";

export default function CreateUser() {
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    ten: "",
    email: "",
    so_dien_thoai: "",
    password: "",
    anh_dai_dien: "",
    trang_thai: 1, // ‚úÖ 1 = ƒê√£ k√≠ch ho·∫°t m·∫∑c ƒë·ªãnh
    vai_tro_id: "",
  });

  type Role = { id: number; ten_vai_tro: string };
  const [roles, setRoles] = useState<Role[]>([]);
  const [loading, setLoading] = useState(false);

  // üîπ L·∫•y danh s√°ch vai tr√≤ khi load trang
  useEffect(() => {
    const fetchRoles = async () => {
      try {
        const res = await getListVaiTro();
        const roleList = Array.isArray(res.data) ? res.data : res;
        setRoles(roleList);
        // N·∫øu ch∆∞a ch·ªçn vai tr√≤, ch·ªçn m·∫∑c ƒë·ªãnh l√† vai tr√≤ ƒë·∫ßu ti√™n
        if (roleList && roleList.length > 0 && !formData.vai_tro_id) {
          setFormData((prev) => ({ ...prev, vai_tro_id: String(roleList[0].id) }));
        }
      } catch (error) {
        console.error("‚ùå L·ªói khi t·∫£i vai tr√≤:", error);
        Swal.fire("L·ªói", "Kh√¥ng th·ªÉ t·∫£i danh s√°ch vai tr√≤", "error");
      }
    };
    fetchRoles();
  }, []);

  // üîπ X·ª≠ l√Ω thay ƒë·ªïi input
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target;

    setFormData((prev) => ({
      ...prev,
      [name]: name === "trang_thai" ? Number(value) : value, // ‚úÖ √©p ki·ªÉu sang number
    }));
  };

  // üîπ Submit form
  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    setLoading(true);

    // Client-side guard: vai_tro_id is required
    if (!formData.vai_tro_id) {
      setLoading(false);
      Swal.fire("‚ùó Thi·∫øu vai tr√≤", "Vui l√≤ng ch·ªçn vai tr√≤ cho ng∆∞·ªùi d√πng.", "warning");
      return;
    }

    try {
      const { ten, ...rest } = formData;

      const payload: any = {
        ...rest,
        ten,
        name: ten, 
        trang_thai: Number(formData.trang_thai), // ‚úÖ ƒë·∫£m b·∫£o g·ª≠i 0 ho·∫∑c 1
        vai_tro_id: Number(formData.vai_tro_id),
      };

      const res = await createUser(payload);

      Swal.fire({
        icon: "success",
        title: "üéâ Th√†nh c√¥ng!",
        text: res.message || "T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng!",
      });

      navigate("/admin/nguoi-dung");
    } catch (err: any) {
      console.error("‚ùå L·ªói t·∫°o ng∆∞·ªùi d√πng:", err);
      Swal.fire({
        icon: "error",
        title: "Th·∫•t b·∫°i!",
        text: err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng",
      });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mt-4">
      <div className="card shadow-sm border-0">
        <div className="card-header bg-primary text-white fw-semibold fs-5">
          ‚ûï Th√™m Ng∆∞·ªùi D√πng M·ªõi
        </div>

        <div className="card-body">
          <form onSubmit={handleSubmit}>
            {/* H·ªç t√™n */}
            <div className="mb-3">
              <label className="form-label fw-bold">H·ªç v√† t√™n</label>
              <input
                type="text"
                name="ten"
                className="form-control"
                placeholder="Nh·∫≠p h·ªç t√™n..."
                value={formData.ten}
                onChange={handleChange}
                required
              />
            </div>

            {/* Email */}
            <div className="mb-3">
              <label className="form-label fw-bold">Email</label>
              <input
                type="email"
                name="email"
                className="form-control"
                placeholder="Nh·∫≠p email..."
                value={formData.email}
                onChange={handleChange}
                required
              />
            </div>

            {/* S·ªë ƒëi·ªán tho·∫°i */}
            <div className="mb-3">
              <label className="form-label fw-bold">S·ªë ƒëi·ªán tho·∫°i</label>
              <input
                type="text"
                name="so_dien_thoai"
                className="form-control"
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i..."
                value={formData.so_dien_thoai}
                onChange={handleChange}
              />
            </div>

            {/* M·∫≠t kh·∫©u */}
            <div className="mb-3">
              <label className="form-label fw-bold">M·∫≠t kh·∫©u</label>
              <input
                type="password"
                name="password"
                className="form-control"
                placeholder="Nh·∫≠p m·∫≠t kh·∫©u..."
                value={formData.password}
                onChange={handleChange}
                required
              />
            </div>

            {/* ·∫¢nh ƒë·∫°i di·ªán */}
            <div className="mb-3">
              <label className="form-label fw-bold">·∫¢nh ƒë·∫°i di·ªán (URL)</label>
              <input
                type="text"
                name="anh_dai_dien"
                className="form-control"
                placeholder="Nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh..."
                value={formData.anh_dai_dien}
                onChange={handleChange}
              />
            </div>

            {/* Vai tr√≤ */}
            <div className="mb-3">
              <label className="form-label fw-bold">Vai tr√≤</label>
              <select
                name="vai_tro_id"
                className="form-select"
                value={formData.vai_tro_id}
                onChange={handleChange}
                required
              >
                <option value="">-- Ch·ªçn vai tr√≤ --</option>
                {roles.length > 0 ? (
                  roles.map((role) => (
                    <option key={role.id} value={role.id}>
                      {role.ten_vai_tro}
                    </option>
                  ))
                ) : (
                  <option disabled>ƒêang t·∫£i...</option>
                )}
              </select>
            </div>

            {/* Tr·∫°ng th√°i */}
            <div className="mb-3">
              <label className="form-label fw-bold">Tr·∫°ng th√°i</label>
              <select
                name="trang_thai"
                className="form-select"
                value={formData.trang_thai}
                onChange={handleChange}
              >
                <option value={1}>ƒê√£ k√≠ch ho·∫°t</option>
                <option value={0}>Ng·ª´ng k√≠ch ho·∫°t</option>
              </select>
            </div>

            {/* N√∫t h√†nh ƒë·ªông */}
            <div className="text-end mt-4">
              <button
                type="button"
                className="btn btn-secondary me-2"
                onClick={() => navigate(-1)}
                disabled={loading}
              >
                Quay l·∫°i
              </button>

              <button type="submit" className="btn btn-primary" disabled={loading}>
                {loading ? "‚è≥ ƒêang l∆∞u..." : "L∆∞u ng∆∞·ªùi d√πng"}
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
